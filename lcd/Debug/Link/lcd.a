;/*
; * lcd.c
; *
; * Created: 2016-08-16 오후 3:26:11
; * Author: 김경식007
; */
;
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <lcd.h>
;#include <delay.h>
;#include <stdio.h>
;#include <interrupt.h>
;	flags -> R17
;#define sbi(port, bit) (port) |= (1 << (bit))
;#define cbi(port, bit) (port) &= ~(1 << (bit))
;#asm
;PCODE: $0000000D VOL: 0
    .equ __lcd_port = 0x1b
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0012 #endasm
;
;#define RTC_PORT PORTE
;#define RTC_PIN PINE
;#define RTC_DDR DDRE
;#define RTC_CLK 0
;#define RTC_DAT 1
;#define RTC_RST 2
;
;#define ds1302_sec 0x80
;#define ds1302_min (ds1302_sec + 0x02)
;#define ds1302_hour (ds1302_min + 0x02)
;#define ds1302_control 0x8e
;#define ds1302_charger 0x90
;
;unsigned char count, test[16];
;char m, s, tmp;
;
;unsigned char ds1302_read(unsigned char addr);
;void ds1302_write(char adr, char dat);
;
;
;interrupt [TIM0_OVF] void timer_int0(void){
; 0000 0028 interrupt [17] void timer_int0(void){

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0029     TCNT0 = 0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002A     if(count++ == 30){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002B         count = 0x00;
;PCODE: $00000018 VOL: 0
; 0000 002C         lcd_clear();
;PCODE: $00000019 VOL: 0
; 0000 002D         lcd_gotoxy(5,0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002E         lcd_puts("WATCH");
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002F         lcd_gotoxy(4,1);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0030 
; 0000 0031         tmp = ds1302_read(ds1302_min);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0032         m = (((tmp & 0x70) >> 4)*10) + (tmp & 0x0f);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0033 
; 0000 0034         tmp = ds1302_read(ds1302_sec);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0035         s = (((tmp & 0x70) >> 4)*10) + (tmp & 0x0f);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0036         sprintf(test, "%02d:%02d:%02d",s, s, s);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0037         lcd_puts(test);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0038     }
; 0000 0039 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0

	.DSEG
_0x5:
	.BYTE 0x6
;
;
;void main(void){
; 0000 003C void main(void){

	.CSEG
;PCODE: $00000059 VOL: 0
; 0000 003D     DDRA = 0xff;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003E     count = 0x00;
;PCODE: $0000005C VOL: 0
; 0000 003F     TIMSK = 0x01;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0040     TCCR0 = 0x07;   //1024분주
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0041     TCNT0 = 0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0042     SREG = 0x80;   //모든 레지스터 활성화
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0043     lcd_init(16);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0044     ds1302_write(ds1302_control, 0x00);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0045     ds1302_write(ds1302_sec, 0x51);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0046     ds1302_write(ds1302_min, 0x59);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0047     ds1302_write(ds1302_hour, 0x11);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0048     ds1302_write(ds1302_control, 0x80);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0049 
; 0000 004A     while(1);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004B }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
;
;unsigned char ds1302_read(unsigned char addr) {
; 0000 004E unsigned char ds1302_read(unsigned char addr) {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004F       char return_data = 0;
; 0000 0050       int i = 0;
; 0000 0051 
; 0000 0052       addr += 1;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;	addr -> R16
;	return_data -> R17
;	i -> R18,R19
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0053       sbi(RTC_DDR, RTC_DAT);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0054       sbi(RTC_PORT, RTC_RST);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0055 
; 0000 0056       for(i = 0; i < 8; i++) {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0057             cbi(RTC_PORT, RTC_CLK);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0058             if (addr & 0x01)
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0059                   sbi(RTC_PORT, RTC_DAT);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 005A             else
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 005B                   cbi(RTC_PORT, RTC_DAT);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 005C 
; 0000 005D             sbi(RTC_PORT, RTC_CLK);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 005E 
; 0000 005F             addr >>= 1;
;PCODE: $000000A6 VOL: 0
; 0000 0060       }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0061 
; 0000 0062       cbi(DDRC, RTC_DAT);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0063 
; 0000 0064       for(i = 0; i < 8; i++) {
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0065             cbi(RTC_PORT, RTC_CLK);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0066             if (RTC_PIN.RTC_DAT)
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0067                   return_data |= 0x80;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0068 
; 0000 0069             sbi(RTC_PORT, RTC_CLK);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 006A             return_data >>= 1;
;PCODE: $000000C1 VOL: 0
; 0000 006B       }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 006C 
; 0000 006D       cbi(PORTC, RTC_CLK);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 006E       cbi(PORTC, RTC_RST);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 006F 
; 0000 0070       return return_data;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0071 }
;PCODE: $000000CF VOL: 0
;
;void ds1302_write(char adr, char dat){
; 0000 0073 void ds1302_write(char adr, char dat){
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0074     char a;
; 0000 0075     sbi(RTC_DDR, RTC_DAT);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;	adr -> R19
;	dat -> R16
;	a -> R17
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0076     sbi(RTC_PORT, RTC_RST);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0077 
; 0000 0078     for(a = 0;a<8;++a){
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0079         cbi(RTC_PORT, RTC_CLK);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 007A         if(adr & 0x1)
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 007B             sbi(RTC_PORT, RTC_DAT);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 007C         else
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 007D             cbi(RTC_PORT, RTC_DAT);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 007E         sbi(RTC_PORT, RTC_CLK);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 007F         adr >>= 1;
;PCODE: $000000F1 VOL: 0
; 0000 0080     }
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0081 
; 0000 0082     for(a = 0;a<8;++a){
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0083         cbi(RTC_PORT, RTC_CLK);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0084         if(dat & 0x1)
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0085             sbi(RTC_PORT, RTC_DAT);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0086         else
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0087             cbi(RTC_PORT, RTC_DAT);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0088         sbi(RTC_PORT, RTC_CLK);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0089         dat >>= 1;
;PCODE: $0000010E VOL: 0
; 0000 008A     }
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 008B     cbi(RTC_PORT, RTC_CLK);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 008C     cbi(RTC_PORT, RTC_RST);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 008D }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
