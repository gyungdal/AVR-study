;/*
; * slbm_sensor.c
; *
; * Created: 2016-09-06 오후 3:00:56
; * Author: Continue
; */
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;#asm
;PCODE: $0000000D VOL: 0
    .equ __lcd_port = 0x1b
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 000E #endasm
;#include <lcd.h>
;
;#define TRIGGER PORTD.1
;
;unsigned short temp;
;int count, distance, catch, speed, key, i;
;char Info[16], arrow;
;void lcd_display();
;
;void main(void)
; 0000 0019 {

	.CSEG
;PCODE: $00000010 VOL: 0
; 0000 001A     DDRC = 0x00;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001B     DDRA = DDRE = DDRB = 0xff;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 001C     TCCR1A = 0xa3;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 001D     TCCR1B = 0x05;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 001E     TCCR3A = 0xa3;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001F     TCCR3B = 0x05;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0020     SREG = 0x80;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0021     ADCSRA = 0x87;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0022     DDRD = 0b00000010;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0023     count = TRIGGER = 0;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0024 
; 0000 0025     EIMSK = 0b00000001;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0026     EICRA = 0b00000010;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0027 
; 0000 0028     TIMSK = 0x01;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0029     TCCR0 = 0x0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 002A     lcd_init(16);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 002B     lcd_clear();
;PCODE: $00000032 VOL: 0
; 0000 002C 
; 0000 002D     while (1) {
;PCODE: $00000033 VOL: 0
; 0000 002E         ADMUX = 0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002F         ADCSRA=ADCSRA|0x40; //ADSC=1변환 시작
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0030         while((ADCSRA&0x10)==0); //ADIF=1이 될떄까지
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0031         speed = (int)((((int)ADCL+((int)ADCH<<8))/1024.0)*254); //A/D변환값 읽기
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0032 
; 0000 0033         ADMUX = 0x01;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0034         ADCSRA=ADCSRA|0x40; //ADSC=1변환 시작
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0035         while((ADCSRA&0x10)==0); //ADIF=1이 될떄까지
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0036         key = (int)((((int)ADCL+((int)ADCH<<8))/1024.0)*254); //A/D변환값 읽기
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0037 
; 0000 0038         ADCSRA = 0x87;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0039         TIFR = 0xff;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 003A         ASSR = 0x0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 003B         TCNT0 = 139;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 003C 
; 0000 003D         TRIGGER = 1;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003E         delay_ms(1);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 003F         distance = TRIGGER = 0;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0040 
; 0000 0041         TCCR0 = 0x02;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0042 
; 0000 0043         catch = 0;
;PCODE: $00000076 VOL: 0
; 0000 0044 
; 0000 0045         while(1){
;PCODE: $00000077 VOL: 0
; 0000 0046             if(catch == 1) break;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0047             else if(distance >= 300) break;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0048         }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0049 
; 0000 004A         if(count++ < 5000){
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 004B             lcd_display();
;PCODE: $0000008C VOL: 0
; 0000 004C             count = 0;
;PCODE: $0000008D VOL: 0
; 0000 004D         }
; 0000 004E         arrow = (PINC.0 & 1);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 004F         arrow = !arrow;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0050         if(distance > 30){
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0051             if(key <= 130 && key >= 120){
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0052                 if(arrow){
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0053                     OCR1A = (speed % 255) * (speed % 255);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0054                     OCR1B = 0;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0055                     OCR3BH = OCR1BH;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0056                     OCR3BL = OCR1BL;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0057                     OCR3AH = OCR1AH;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0058                     OCR3AL = OCR1AL;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0059                 }else{
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 005A                     OCR1A = 0;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 005B                     OCR1B =  (speed % 255) * (speed % 255);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 005C                     OCR3AH = OCR1AH;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 005D                     OCR3AL = OCR1AL;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 005E                     OCR3BH = OCR1BH;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 005F                     OCR3BL = OCR3BL;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0060                 }
;PCODE: $000000CB VOL: 0
; 0000 0061             }else if(key > 130){
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0062                 temp = 0xffff;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0063                 if(arrow){
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0064                     //OCR1A = temp;
; 0000 0065                     OCR3AH = (temp >> 8);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0066                     OCR3AL = temp;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0067                     //temp = (speed % 255) * (speed % 255);
; 0000 0068                     OCR3BH = OCR3BL = 0;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0069                     OCR1B = OCR1A = 0x0;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 006A                 }else{
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 006B                     //OCR1B = temp;
; 0000 006C                     OCR3BH = (temp >> 8);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 006D                     OCR3BL = temp;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 006E                     //temp = (speed % 255) * (speed % 255);
; 0000 006F                     OCR3AH = OCR1BH;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0070                     OCR3AL = OCR1BL;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0071                     OCR1B = OCR1A = 0x0;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0072                     //OCR3BH = (temp >> 8);
; 0000 0073                     //OCR3BL = ((temp << 8) >> 8);
; 0000 0074                 }
;PCODE: $000000ED VOL: 0
; 0000 0075             }else{
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0076             temp = (speed % 255) * (speed % 255);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0077                 if(arrow){
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0078                     //OCR1A = temp;
; 0000 0079                     OCR1A = temp;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 007A                     OCR3AH = OCR3AL = 0x0;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 007B                     //temp = (speed % 255) * (speed % 255);
; 0000 007C                     OCR1B = 0;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 007D                     OCR3BH = OCR3AH;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 007E                     OCR3BL = OCR3AL;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 007F                     //OCR3AH = (temp >> 8);
; 0000 0080                     //OCR3AL = ((temp << 8) >> 8);
; 0000 0081                 }else{
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0082                     //OCR1B = temp;
; 0000 0083                     OCR1B = temp;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0084                     //OCR3BH = (temp >> 8);
; 0000 0085                     //OCR3BL = ((temp << 8) >> 8);
; 0000 0086                     //temp = (speed % 255) * (speed % 255);
; 0000 0087                     OCR1A = 0;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0088                     OCR3AH = OCR3AL = OCR3BH = OCR3BL = 0x0;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0089                 }
;PCODE: $00000110 VOL: 0
; 0000 008A             }
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 008B         }else{
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 008C             OCR1A = 0;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 008D             OCR1B = 0;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 008E             OCR3BH = OCR1BH;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 008F             OCR3BL = OCR1BL;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0090             OCR3AH = OCR1AH;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0091             OCR3AL = OCR1AL;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0092             delay_ms(1000);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0093         }
;PCODE: $00000123 VOL: 0
; 0000 0094     }
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0095 }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;
;void lcd_display()
; 0000 0098 {
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0099     lcd_clear();
;PCODE: $0000012B VOL: 0
; 0000 009A     lcd_gotoxy(0,0);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 009B     lcd_puts("DIS, SPE, ANG");
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 009C     lcd_gotoxy(0,1);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 009D     sprintf(Info, "%3d, %3d, %3d %d",distance, speed, key, PINC);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 009E     lcd_puts(Info);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 009F 
; 0000 00A0 }
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0

	.DSEG
_0x28:
	.BYTE 0xE
;
;interrupt [TIM0_OVF] void timer_int0(void){
; 0000 00A2 interrupt [17] void timer_int0(void){

	.CSEG
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00A3     TCNT0 = 139;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00A4     distance++;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00A5 }
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;
;interrupt [EXT_INT0] void external_int0(void)
; 0000 00A8 {
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00A9 
; 0000 00AA     TCCR0 = 0x0;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00AB     catch = 1;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00AC }
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
